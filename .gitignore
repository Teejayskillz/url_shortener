Excellent choice! Moving sensitive information like your SECRET_KEY and database credentials out of settings.py and into environment variables is a critical security best practice for deployment.

We'll use a Python library called python-decouple (or simply decouple) for this, as it's straightforward and effective for managing environment variables.

Step 1: Install python-decouple
First, make sure your virtual environment is active and install the library:

Bash

(venv) skillz@skillz-HP-Pavilion-g4-Notebook-PC:~/my_url_shortener_project$ pip install python-decouple
Step 2: Modify settings.py
Now, we'll tell Django to read these sensitive values from environment variables using decouple.

Open your main project settings.py file (likely my_url_shortener_project/download_shortener_project/settings.py) and make the following changes:

Python

# my_url_shortener_project/download_shortener_project/settings.py

import os
from pathlib import Path
from decouple import config # <--- ADD THIS LINE

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
# OLD: SECRET_KEY = 'django-insecure-m#^$y^r+u3^a!d=d1-l6k4039i2k=48z7k77$9!q49s!*y8&p@'
SECRET_KEY = config('SECRET_KEY') # <--- MODIFY THIS LINE


# SECURITY WARNING: don't run with debug turned on in production!
# OLD: DEBUG = True
DEBUG = config('DEBUG', default=False, cast=bool) # <--- MODIFY THIS LINE

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',') # <--- MODIFY THIS LINE
# The .split(',') is important because ALLOWED_HOSTS is a list.
# In your .env, you'd put "127.0.0.1,localhost,yourdomain.com"


# Application definition

INSTALLED_APPS = [
    # ... (your existing installed apps) ...
]

MIDDLEWARE = [
    # ... (your existing middleware) ...
]

ROOT_URLCONF = 'download_shortener_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # If you used this for root templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'download_shortener_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),        # <--- MODIFY THIS
        'USER': config('DB_USER'),        # <--- MODIFY THIS
        'PASSWORD': config('DB_PASSWORD'), # <--- MODIFY THIS
        'HOST': config('DB_HOST', default='localhost'), # <--- MODIFY THIS, default to localhost
        'PORT': config('DB_PORT', default='3306', cast=int), # <--- MODIFY THIS, default to 3306
    }
}

# ... (rest of your settings.py) ...

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # <--- ADD THIS LINE if not present, needed for deployment

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
Key changes explained:

from decouple import config: Imports the necessary function.
SECRET_KEY = config('SECRET_KEY'): Now SECRET_KEY will be read from an environment variable named SECRET_KEY.
DEBUG = config('DEBUG', default=False, cast=bool): Reads DEBUG. If DEBUG is not found in environment variables, it defaults to False (which is what you want for production). cast=bool ensures it's read as a boolean.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(','): This reads a comma-separated string for ALLOWED_HOSTS and splits it into a list.
DATABASES: All sensitive database credentials are now read from environment variables. I've added default values for HOST and PORT to make local development easier if you omit them from the .env file, but in production, these should always be explicitly set.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles'): This defines the directory where all your static files will be collected for production. This is crucial for Nginx to serve them.
Step 3: Create a .env File (IMPORTANT: Do NOT commit to Git!)
In your project's root directory (the one containing manage.py, not inside download_shortener_project/), create a new file named .env (note the leading dot).

Add your sensitive variables to this file, like this:

# my_url_shortener_project/.env

SECRET_KEY=your_actual_secret_key_from_settings.py_originally # Paste your long secret key here
DEBUG=True # Set to True for local development, False for production
ALLOWED_HOSTS=127.0.0.1,localhost

DB_NAME=your_database_name # e.g., myurlshortenerdb
DB_USER=your_db_username # e.g., django_user
DB_PASSWORD=your_db_password # e.g., secure_db_password
DB_HOST=127.0.0.1 # Or the IP/hostname of your MySQL server
DB_PORT=3306 # Usually 3306 for MySQL
Replace the placeholder values with your actual SECRET_KEY and database credentials.

Step 4: Update .gitignore (CRITICAL!)
You must prevent your .env file from being committed to your version control system (Git).

Open the .gitignore file in your project's root directory (my_url_shortener_project/.gitignore) and add the following line:

# my_url_shortener_project/.gitignore

# Django stuff:
*.log
*.pot
*.pyc
__pycache__/
.Python
.pylint.d
.ropeproject
.env  # <--- ADD THIS LINE
# ... other existing entries ...